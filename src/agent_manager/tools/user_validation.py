from typing import Optional
from sqlalchemy import text
from sqlalchemy.orm import Session
from pydantic import BaseModel
from src.db.db import SessionLocal
from agents import function_tool
from src.model.model import User  # SQLAlchemy model
from datetime import date

# ---------- Pydantic Models ----------
class UserQueryOutput(BaseModel):
    id: int
    full_name: str
    email: str
    company: str
    user_type: str
    verified: str
    #signup_date: Optional[str] 

class UserCheckResponse(BaseModel):
    exists: bool
    message: str
    user: Optional[UserQueryOutput] = None

# Allowed ENUM values
ALLOWED_USER_TYPES = {"military", "corporate", "research", "guest"}
ALLOWED_VERIFIED = {"yes", "no"}

# ---------- Tool Logic ----------
def get_all_users_and_check(
    email: Optional[str] = None,
    full_name: Optional[str] = None,
    company: Optional[str] = None,
    user_type: Optional[str] = None,
    verified: Optional[str] = None
) -> UserCheckResponse:
    """
    Fetch all users. If `email` is provided, check if that user exists.
    If not, register them with given details.
    """
    session: Session = SessionLocal()
    try:
        # 1. Fetch all users
        sql = text("SELECT * FROM user")
        result = session.execute(sql)
        rows = result.fetchall()

        # Convert rows to Pydantic model instances
        users = [
            UserQueryOutput(
                id=row[0],
                full_name=row[1],
                email=row[2],
                company=row[3],
                user_type=row[4],
                verified=row[5],
                #signup_date=row[6].isoformat() if row[6] else None
            )
            for row in rows
        ]

        # 2. If email provided, check if user exists
        if email:
            existing_user = session.query(User).filter(User.email == email).first()
            if existing_user:
                return UserCheckResponse(
                    exists=True,
                    message=f"Welcome back {existing_user.full_name}! Continuing chat...",
                    user=UserQueryOutput(
                        id=existing_user.id,
                        full_name=existing_user.full_name,
                        email=existing_user.email,
                        company=existing_user.company,
                        user_type=existing_user.user_type,
                        verified=existing_user.verified,
                        #signup_date=existing_user.sign_up_date.isoformat() if existing_user.sign_up_date else None
                    )
                )

            # 3. If not found but missing details, request them
            if not all([full_name, company, user_type, verified]):
                return UserCheckResponse(
                    exists=False,
                    message="User not found. Please provide full_name, email, company, user_type, and verified status."
                )

            # 4. Validate ENUM fields
            if user_type.lower() not in ALLOWED_USER_TYPES:
                return UserCheckResponse(
                    exists=False,
                    message=f"Invalid user_type '{user_type}'. Allowed values: {', '.join(ALLOWED_USER_TYPES)}."
                )
            if verified.lower() not in ALLOWED_VERIFIED:
                return UserCheckResponse(
                    exists=False,
                    message=f"Invalid verified status '{verified}'. Allowed values: yes or no."
                )

            # 5. Register new user (id auto-generated by DB)
            new_user = User(
                full_name=full_name,
                email=email,
                company=company,
                user_type=user_type.lower(),
                verified=verified.lower(),
                #sign_up_date=date.today(),
            )
            session.add(new_user)
            session.commit()
            session.refresh(new_user)

            return UserCheckResponse(
                exists=True,
                message=f"User {full_name} registered successfully! Continuing chat...",
                user=UserQueryOutput(
                    id=new_user.id,
                    full_name=new_user.full_name,
                    email=new_user.email,
                    company=new_user.company,
                    user_type=new_user.user_type,
                    verified=new_user.verified,
                    #signup_date=new_user.sign_up_date.isoformat() if new_user.sign_up_date else None
                )
            )

        # If no email provided, just return all users
        return UserCheckResponse(
            exists=True,
            message="All users fetched successfully.",
            user=None
        )

    except Exception as e:
        print("‚ùå Error in get_all_users_and_check:", str(e))
        return UserCheckResponse(
            exists=False,
            message=f"Error: {str(e)}"
        )
    finally:
        session.close()

# ---------- Wrap as Tool ----------
get_all_users_and_check_tool = function_tool(
    get_all_users_and_check,
)
